name: Criar nota e enviar para repo privado
on:
  push:
    branches:
      - main
jobs:
  generate_note:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar o repositório público com histórico completo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Traz todo o histórico de commits
          
      - name: Preparar notas de diff
        id: prepare_note
        run: |
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          REPO_NAME=$(basename $(git config --get remote.origin.url | sed 's/\.git$//'))
          NOTE_FILE="${REPO_NAME} ${TIMESTAMP}.md" # Nome do arquivo com REPO_NAME e TIMESTAMP
          echo "note_file=${NOTE_FILE}" >> $GITHUB_OUTPUT
          
          # Conteúdo da nota
          echo "" >> "${NOTE_FILE}" # Linha em branco
          # Informações do commit
          echo "**Autor:** $(git log -1 --pretty=format:'%an')" >> "${NOTE_FILE}"
          echo "**Mensagem:** $(git log -1 --pretty=format:'%s')" >> "${NOTE_FILE}"
          echo "**Data do Commit:** $(git log -1 --pretty=format:'%cd' | awk '{print $4, $2, $3, $5}')" >> "${NOTE_FILE}"
          echo "**Commit:** [Link do Commit](https://github.com/hugosousa42/RepoTest/commit/$(git log -1 --pretty=format:'%H'))" >> "${NOTE_FILE}"
          echo "**Files nesse commit:** [Link dos Files](https://github.com/hugosousa42/RepoTest/tree/$(git log -1 --pretty=format:'%H'))" >> "${NOTE_FILE}"
          echo "**Branch:** $(git branch --show-current)" >> "${NOTE_FILE}"
          
          # Informações adicionais
          ADDED_LINES=$(git diff --stat HEAD^ HEAD | grep -o "+" | wc -l)
          REMOVED_LINES=$(git diff --stat HEAD^ HEAD | grep -o "-" | wc -l)
          MODIFIED_FILES=$(git diff --name-only HEAD^ HEAD | wc -l)
          echo "**Linhas Adicionadas:** $ADDED_LINES" >> "${NOTE_FILE}"
          echo "**Linhas Removidas:** $REMOVED_LINES" >> "${NOTE_FILE}"
          echo "**Arquivos Modificados:** $MODIFIED_FILES" >> "${NOTE_FILE}"
          echo "### Diferenças do Commit:" >> "${NOTE_FILE}"
          
          # Gerar diffs separados e ordenados alfabeticamente
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            git diff-tree -r HEAD^ HEAD --no-commit-id --name-only | sort | while read -r file; do
              if [ -f "$file" ]; then
                echo "" >> "${NOTE_FILE}"
                echo "#### Diff para \`$file\`:" >> "${NOTE_FILE}"
                echo '```diff' >> "${NOTE_FILE}"
                git diff HEAD^ HEAD -- "$file" >> "${NOTE_FILE}"
                echo '```' >> "${NOTE_FILE}"
              fi
            done
          else
            echo "Commit inicial, sem diffs." >> "${NOTE_FILE}"
          fi
          
      - name: Clonar o repositório privado e enviar nota
        env:
          PRIVATE_REPO_URL: ${{ secrets.PRIVATE_REPO_URL }}
        run: |
          # Obter nome do arquivo
          NOTE_FILE="${{ steps.prepare_note.outputs.note_file }}"
          
          # Clona o repositório privado com token de acesso
          if ! git clone https://x-access-token:${{ secrets.GH_PAT }}@$PRIVATE_REPO_URL.git; then
            echo "Falha ao clonar o repositório privado."
            exit 1
          fi
          
          # Extrair o nome do diretório do repositório privado
          PRIVATE_REPO_DIR=$(basename $PRIVATE_REPO_URL)
          cd "$PRIVATE_REPO_DIR"
          
          mv "../${NOTE_FILE}" . # Move o arquivo com o nome correto
          git config --global user.email "bot@github.com"
          git config --global user.name "GitHub Actions Bot"
          git add .
          
          # Evita erro caso não haja mudanças
          if git diff --staged --quiet; then
            echo "Nenhuma mudança detectada. Pulando commit."
            exit 0
          fi
          
          # Faz commit e push
          if ! git commit -m "Adicionando nova nota automática"; then
            echo "Falha ao fazer commit."
            exit 1
          fi
          
          if ! git push; then
            echo "Falha ao fazer push."
            exit 1
          fi
          
      - name: Limpar ambiente
        run: |
          # Limpar arquivos temporários
          rm -rf $(basename ${{ secrets.PRIVATE_REPO_URL }})
